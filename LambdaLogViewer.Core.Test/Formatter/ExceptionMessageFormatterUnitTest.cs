namespace LambdaLogViewer.Core.Test.Formatter
{
    using LambdaLogViewer.Core.Formatter;
    using Xunit;

    public class ExceptionMessageFormatterUnitTest
    {
        [Fact]
        public void Format_Should_Return_FormattedExceptionMessage()
        {
            string exceptionMessage = @"System.Net.Http.HttpRequestException: Name or service not known<br> ---> System.Net.Sockets.SocketException (0xFFFDFFFF): Name or service not known<br>   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)<br>   --- End of inner exception stack trace ---<br>   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)<br>   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)<br>   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)<br>   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)<br>   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)<br>   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)<br>   at System.Net.Http.DiagnosticsHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)<br>   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)<br>   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)<br>   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)<br>   at Poker.Bonus.Service.Infrastructures.HttpClient.CasinoGameApiHttpClient.GetGamesCodeGetAsync() in /app/Poker.Bonus.Service/Infrastructures/HttpClient/CasinoGameApiHttpClient.cs:line 16<br>   at Poker.Bonus.Service.Features.CasinoGameFeature.Services.CasinoGameService.GetAllPokerGamesAsync() in /app/Poker.Bonus.Service/Features/FreeTicketFeature/Services/CasinoGameService.cs:line 19<br>   at Poker.Bonus.Service.Features.FreeTicketFeature.Controllers.V1.FreeTicketController.GetAllAsync(String userId) in /app/Poker.Bonus.Service/Features/FreeTicketFeature/Controllers/V1/FreeTicketController.cs:line 40<br>   at lambda_method(Closure , Object )";

            var exceptionMessageFormatter = new HtmlExceptionMessageFormatter();
            string formattedExceptionMessage = exceptionMessageFormatter.Format(exceptionMessage);

            Assert.Equal(@"System.Net.Http.HttpRequestException: Name or service not known<br> ---> System.Net.Sockets.SocketException (0xFFFDFFFF): Name or service not known<br>   &emsp;at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)<br>   --- End of inner exception stack trace ---<br>   &emsp;at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)<br>   &emsp;at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)<br>   &emsp;at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)<br>   &emsp;at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)<br>   &emsp;at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)<br>   &emsp;at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)<br>   &emsp;at System.Net.Http.DiagnosticsHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)<br>   &emsp;at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)<br>   &emsp;at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)<br>   &emsp;at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)<br>   &emsp;at Poker.Bonus.Service.Infrastructures.HttpClient.CasinoGameApiHttpClient.GetGamesCodeGetAsync() &emsp;&emsp;in /app/Poker.Bonus.Service/Infrastructures/HttpClient/CasinoGameApiHttpClient.cs:line 16<br>   &emsp;at Poker.Bonus.Service.Features.CasinoGameFeature.Services.CasinoGameService.GetAllPokerGamesAsync() &emsp;&emsp;in /app/Poker.Bonus.Service/Features/FreeTicketFeature/Services/CasinoGameService.cs:line 19<br>   &emsp;at Poker.Bonus.Service.Features.FreeTicketFeature.Controllers.V1.FreeTicketController.GetAllAsync(String userId) &emsp;&emsp;in /app/Poker.Bonus.Service/Features/FreeTicketFeature/Controllers/V1/FreeTicketController.cs:line 40<br>   &emsp;at lambda_method(Closure , Object )", formattedExceptionMessage);
        }
    }
}
